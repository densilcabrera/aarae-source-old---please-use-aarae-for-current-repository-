function dif = GoverDiffuseness(hoaSig,hoaFmt,BeaWgt)
% GOVERDIFFUSENESS     Diffuseness of a HOA sound scene using Gover's method
%
% dif = GoverDiffuseness(hoaFmt,hoaSig)
%
% Calculate the diffuseness index of a HOA sound scene by looking at how 
% much energy is coming from every direction in space. 
%
% Inputs: - hoaFmt defines the format of the HOA signals, as generated by
%           the GenerateHoaFmt function.
%         - hoaSig is a N x M matrix, where N is the number of time samples
%           (or frequency bins) and M is the number of HOA signals.
%         - (optional) BeaWgt is a matrix of beamforming weights,
%           preferably bearing at directions evenly distributed in space.
%           If BeaWgt is not provided a set of weights is calculated
%           automatically.
%
% Output: - dif is the diffuseness index for the input set of signals, 
%           comprised between 0 and 1.

% Default beamforming weights
if nargin < 3
    
    % Determine if the scene is 2D or 3D
    if hoaFmt.res3d > 0
        scnDim = '3d' ;
    else
        scnDim = '2d' ;
    end
    
    % Set of directions in space
    switch scnDim
        
        case '3d'
            
            [azm,elv] = RegularPolyhedron(642) ;
            
        case '2d'
            
            azm = (0:359)'*pi/180 ;
            elv = zeros(size(azm)) ;
            
    end
    
    % Beamforming weights for these directions
    BeaWgt = SphericalHarmonicMatrix(hoaFmt,azm,elv).' / hoaFmt.nbComp ;

end

% Maximum energy variance in a non diffuse case
beaEng = abs(BeaWgt*SphericalHarmonicMatrix(hoaFmt,0,0)).^2 ;
avgEng = mean(beaEng) ;
maxVar = sum(abs(beaEng-avgEng))/avgEng ; 

% Energy variance in this case
beaEng = sum(abs(hoaSig*BeaWgt.').^2) ;
avgEng = mean(beaEng) ;
var = sum(abs(beaEng-avgEng))/avgEng ; 

% Diffuseness
dif = 1 - var/maxVar ;
