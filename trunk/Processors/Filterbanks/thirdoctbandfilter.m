function [OUT,varargout] = thirdoctbandfilter(IN,fs,param,method)
B = 3;
N = 8;
ok = 0;
nominalfreq = [25,31.5,40,50,63,80,100,125,160,200,250,315,400,500,630,800,1000,1250,1600,2000,2500,3150,4000,5000,6300,8000,10000,12500,16000,20000];
if nargin < 4, method = 0; end
if nargin < 3
    param = nominalfreq;
    [S,ok] = listdlg('Name','Octave band filter input parameters',...
        'PromptString','Center frequencies [Hz]',...
        'ListString',[num2str(param') repmat(' Hz',length(param),1)]);
    param = param(S);
else
    for i = 1:length(param)
        check = find(nominalfreq == param(i));
        if isempty(check), check = 0; end
        S(i) = check;
    end
    if all(S), param = sort(param,'ascend'); ok = 1; else ok = 0; end;
end
if isstruct(IN)
    audio = IN.audio;
    fs = IN.fs;
elseif ~isempty(param)
    audio = IN;
    if nargin < 2
        fs = inputdlg({'Sampling frequency [samples/s]'},...
            'Fs',1,{'48000'});
        fs = str2num(char(fs));
    end
end
if ~isempty(param) && ~isempty(fs)
    if fs <= 44100, param = param(find(param<adjustF0(20000))); end
    if ok == 1 && isdir([cd '/Processors/Filterbanks/' num2str(fs) 'Hz'])
        content = load([cd '/Processors/Filterbanks/' num2str(fs) 'Hz/ThirdOctaveBandFilterBank.mat']);
        filterbank = content.filterbank;
        centerf = zeros(size(param));
        filtered = zeros(size(audio,1),size(audio,2),length(param),...
            size(audio,4),size(audio,5),size(audio,6));
        for i = 1:length(param)
            
            centerf(i) = param(1,i);
            %filtered(:,:,i,:,:,:) = filter(filterbank(1,S(1,i)),audio(:,:,1,:,:,:));
            switch method
                case -1
                    % reverse time filter
                    filtered(:,:,i,:,:,:) = ...
                        flipud(filter(filterbank(1,S(1,i)),flipud(audio(:,:,1,:,:,:))));
                case 0
                    % double filter reverse & normal time
                    filtered(:,:,i,:,:,:) = ...
                        filter(filterbank(1,S(1,i)),flipud(filter(filterbank(1,S(1,i)),flipud(audio(:,:,1,:,:,:)))));
                otherwise
                    % normal filter
                    filtered(:,:,i,:,:,:) = filter(filterbank(1,S(1,i)),audio(:,:,1,:,:,:));
            end
        end
    else
        F0 = param;
        centerf = zeros(size(param));
        for i = 1:length(param)
            
            centerf(i) = param(1,i);
            filterbank = thirdoctband(B, N, adjustF0(F0(i)), fs);
            filtered(:,:,i,:,:,:) = filter(filterbank,audio(:,:,1,:,:,:));
            
        end
    end
else
    filtered = [];
    centerf = [];
end
if isstruct(IN) && ~isempty(filtered)
    OUT = IN;
    OUT.audio = filtered;
    OUT.bandID = centerf;
    OUT.funcallback.name = 'thirdoctbandfilter.m';
    OUT.funcallback.inarg = {fs,param,method};
else
    OUT = filtered;
end
varargout{1} = centerf;
end


function Hd = thirdoctband(B, N, F0, Fs)
%THIRDOCTBANDFILTER Returns a discrete-time filter object.

%
% MATLAB Code
% Generated by MATLAB(R) 7.11 and the Signal Processing Toolbox 6.14.
%
% Generated on: 25-Jul-2013 18:39:38
%
% Default parameters
%B  = 3;      % Bands per octave
%N  = 8;      % Order
%F0 = 1000;   % Center frequency
%Fs = 48000;  % Sampling Frequency

h = fdesign.octave(B, 'Class 0', 'N,F0', N, F0, Fs);

Hd = design(h, 'butter', ...
    'SOSScaleNorm', 'Linf');


end

function validf = adjustF0(f0)
% Modified from:

%GETVALIDCENTERFREQUENCIES   Get the validcenterfrequencies.

%   Author(s): V. Pellissier
%   Copyright 2006 The MathWorks, Inc.
%   $Revision: 1.1.6.1 $  $Date: 2006/10/18 03:26:31 $

% and

%VALIDATE   Validate the specs

%   Author(s): V. Pellissier
%   Copyright 2006 The MathWorks, Inc.
%   $Revision: 1.1.6.2 $  $Date: 2006/11/19 21:45:20 $

b = 3; % BandsPerOctave
G = 10^(3/10);
x = -100:135;
if rem(b,2)
    % b odd
    validcenterfrequencies = 1000*(G.^((x-30)/b));
else
    validcenterfrequencies = 1000*(G.^((2*x-59)/(2*b)));
end
validcenterfrequencies(validcenterfrequencies>20000)=[]; % Upper limit 20 kHz
validcenterfrequencies(validcenterfrequencies<20)=[];    % Lower limit 20 Hz

validFreq = validcenterfrequencies;
if isempty(find(f0 == validFreq)),
    [~, idx] = min(abs(f0-validFreq));
    validf = validFreq(idx);
else
    validf = f0;
end
end
% [EOF]
