#summary Guide on how to add an analyser to AARAE.

= Introduction =

An analyser in AARAE primarily aims to provide user-readable output, for example in the form of a visualisation together with numeric data. An analyser can also provide auralization or sonification, but some such cases may be better as a _processor_ rather than an _analyser_ (if the audio content of the auralization/sonification is the main purpose of the function).

Usually it is quite easy to adapt a pre-existing (or newly written) Matlab function so that it can be integrated into AARAE as an analyser. This page provides information on how this can be done, and there are also many analysers already in AARAE that can serve as examples.


= Name and Description =
The name of the function is what a user sees within the GUI, so contributed functions need to have helpful names. In some cases, there may be several analyser functions that do similar things (e.g. different ways of estimating reverberation time from an impulse response), and so the function name should be specific enough to allow the alternative functions. In other words, it is not a good idea to call a function 'reverbtime', but instead the name should have more particular information (such as the algorithm used, etc).

Within the GUI, hovering the mouse over the name of the function will bring up a description of the function (if one has been written). This description is the continuous comments within the function immediately following the function declaration. Please consider what text should be included there.


= Analyser Inputs =

The inputs to an analyser are likely to include audio data, metadata (e.g. sampling rate), and user-controlled settings for the analyser.

== Audio Data and Metadata ==

Audio data and metadata in AARAE is kept within a structure. An analyser for AARAE should have this structure as its first input argument.

The currently available fields within this structure include:

|| *Field* || * Description and comment* ||
|| .audio || This contains the audio waveform, descending in time down the columns. Dimension 2 is used for channels, and dimension 3 is used for bands (e.g. octave-band filtered data). Analysers should be written to anticipate a potentially 3-dimensional waveform matrix, rather than returning an error if the input is multi-channel and/or multi-band. ||
|| .fs || This is the audio sampling rate in Hz. ||
|| .bandID || This is a list of frequencies (or numbers of some type) associated with each band. ||
|| .chanID || This is a list of channel identifiers (e.g. angles in the case of beam-formed audio) - which has not been implemented yet. ||
|| .cal || This is a calibration offset in decibels such that 10*log10(wave.^2)+cal yields the appropriate level (e.g., sound pressure level). ||

It is best practice to write an analyser function to accept structure input, as well accepting as a set of discrete input arguments (which can be more convenient if the function is not being called via the GUI). This can be achieved using an isstruct() test, for example:

{{{
function dosomething(in, fs, cal)
if isstruct(in)
       audio = in.audio; % audio wave data
       fs = in.fs; % audio sampling rate in Hz
      cal = in.cal; % calibration offset in dB
else
       audio = in;
end
% then do something with the data and metadata ...
}}}

In the above example, the second and third input arguments are ignored if the first input argument is a structure. However if the first input argument is a vector or matrix, it will be used directly as the audio waveform, and the second and third input arguments are required (notwithstanding further code to set default values).

Considering that the audio waveform might be 1, 2 or 3-dimensional, it may be important to be able to read its size. The following code provides this information:

{{{
S = size(audio); % size of the audio matrix
ndim = length(S); % number of dimensions
switch ndim
    case 1
        len = S(1); % number of samples in audio
        chans = 1; % number of channels
        bands = 1; % number of bands
    case 2
        len = S(1); % number of samples in audio
        chans = S(2); % number of channels
        bands = 1; % number of bands
    case 3
        len = S(1); % number of samples in audio
        chans = S(2); % number of channels
        bands = S(3); % number of bands
end
}}}

Having obtained this information, we then need to decide what to do with it. Some analysers will work perfectly well on any number of channels and bands, while others may be designed only for 1 channel, 2 channels, 1 band, or some other constraints. One option is to return an error if the input is incorrectly dimensioned. Another option is to truncate and/or mix the data as required. For example:

{{{
audio = mean(audio,3); % mix all bands together (removing the third dimension)
disp('Multiband audio has been mixed into a single band.')
}}}

or

{{{
if chans > 2
       audio = audio(:,1:2,:); % use only the first two channels
       disp('Only the first two channels have been used.')
end
}}}

Sometimes a field that would be used by the analyser is not present in the input structure. For example, the calibration offset might not be present if the data has not been calibrated.

{{{
if exist(in.cal, 'var')
      cal = in.cal; % get the calibration offset from the input structure
else
      cal = 0; % set to default value (but it would be more useful to get a value via a dialog box)
end
}}}

== Function Settings ==

When running an analyser from the AARAE GUI, the user-controlled settings for an analyser need to be entered using a dialog box. Fortunately it is quite easy to add a rudimentary dialog box to a Matlab function, which is often all that is required. Matlab's inputdlg() is one way of achieving this (refer to Matlab's help). The following is an example of a dialog box with three user-set parameters:

{{{
% Dialog box for settings

% Prompt for 3 named parameters:
    prompt = {'Threshold for IR start detection (dB)', ...
        'Bands per octave (1 | 3)', ...
        'Plot (0 | 1)'};

% Title of the dialog box
    dlg_title = 'Settings'; 

    num_lines = 1;

% Default values
    def = {'-20','1','1'}; 

    answer = inputdlg(prompt,dlg_title,num_lines,def);
    
% Set function variables from dialog box user-input values
    if ~isempty(answer)
        startthresh = str2num(answer{1,1});
        bpo = str2num(answer{2,1});
        doplot = str2num(answer{3,1});
    end
}}}



= Charts and Other Outputs =

It is worth thinking about how the result of running the analyser can be best represented. Charts are usually helpful, and other options include numerical tables, sonification, etc.

Sometimes a while loop could make it easier to work with multiple output options (so the user can choose whether or not to generate each output type, and indeed to discard the analysis results).

== Format of Data Returned by the Analyser Function ==

This issue is still under development.

= License =

AARAE uses the BSD 3-Clause license for the project as a whole, and therefore  contributed code within the project should also use it to avoid license conflicts.

Except, perhaps, in the case of minor contributions, please add the following license to your Matlab function as a comment. Change the YEAR, OWNER and ORGANISATION fields as appropriate.

{{{
%**************************************************************************
% Copyright (c) <YEAR>, <OWNER>
% All rights reserved.
%
% Redistribution and use in source and binary forms, with or without 
% modification, are permitted provided that the following conditions are 
% met:
%
%  * Redistributions of source code must retain the above copyright notice,
%    this list of conditions and the following disclaimer.
%  * Redistributions in binary form must reproduce the above copyright 
%    notice, this list of conditions and the following disclaimer in the 
%    documentation and/or other materials provided with the distribution.
%  * Neither the name of the <ORGANISATION> nor the names of its contributors
%    may be used to endorse or promote products derived from this software 
%    without specific prior written permission.
%
% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
% "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
% TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A 
% PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
% OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
% EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
% PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
% PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
% LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
% NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
% SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
%**************************************************************************
}}}

= Integrating the Analyser into AARAE =

Once a function has been appropriately prepared, it can be integrated into AARAE simply by putting it into the appropriate subdirectory within the Analysers directory in the AARAE file structure. If required, a new subdirectory can be added (but please avoid unnecessarily adding subdirectories).

If you are a contributor to this Google Code group, you can add it to the repository via Subversion. Otherwise contact Densil Cabrera directly.